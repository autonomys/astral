services:
  staking-worker:
    profiles: [indexers]
    build:
      context: ./indexers
      dockerfile: workers/staking-worker/Dockerfile
    depends_on:
      pgcat-staking:
        condition: service_healthy
      postgres-staking:
        condition: service_healthy
      redis:
        condition: service_healthy
      # node:
      #   condition: service_healthy
    restart: unless-stopped
    environment:
      AUTONOMYS_NODE_URL: ${RPC_URLS}
      DB_HOST: ${STAKING_DB_HOST:-postgres-staking}
      DB_PORT: ${STAKING_INTERNAL_PORT:-5432} # Internal port, not external
      DB_USER: ${STAKING_DB_USER:-postgres}
      DB_PASSWORD: ${STAKING_DB_PASSWORD:-postgres}
      DB_NAME: ${STAKING_DB_DATABASE:-staking}
      REDIS_URL: "redis://${REDIS_SERVICE_HOST:-redis}:${REDIS_SERVICE_PORT:-6379}"
      BATCH_SIZE: "${BATCH_SIZE:-1000}"
      QUEUE_PROCESSING_INTERVAL_MS: "${QUEUE_PROCESSING_INTERVAL_MS:-500}"
      # Performance configuration
      MAX_CONCURRENT_BATCHES: "${MAX_CONCURRENT_BATCHES:-8}"
      DB_POOL_SIZE: "${DB_POOL_SIZE:-25}"
      DB_CONNECTION_TIMEOUT_MS: "${DB_CONNECTION_TIMEOUT_MS:-3000}"
      # Retry configuration
      MAX_RETRIES: "${MAX_RETRIES:-3}"
      RETRY_DELAY_MS: "${RETRY_DELAY_MS:-5000}"
      # Finality and chain monitoring
      FINALITY_THRESHOLD: "${FINALITY_THRESHOLD:-100}"
      CHAIN_TIP_UPDATE_INTERVAL_MS: "${CHAIN_TIP_UPDATE_INTERVAL_MS:-10000}"
      CHAIN_HEAD_POLL_INTERVAL_MS: "${CHAIN_HEAD_POLL_INTERVAL_MS:-6000}"
      # Health Check Configuration
      DB_HEALTH_CHECK_INTERVAL_MS: "${DB_HEALTH_CHECK_INTERVAL_MS:-30000}"
      # Logging
      ENABLE_DEBUG_LOGS: "${ENABLE_DEBUG_LOGS:-false}"
      LOG_LEVEL: "${LOG_LEVEL:-info}"
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
